# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TimeSeriesViewingTool
                                 A QGIS plugin
 A tool to view time series images
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Chaoying Lin
        email                : 1754129@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import asyncio

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QPoint, Qt, QRectF, QByteArray, QBuffer, QRect
from qgis.PyQt.QtGui import QIcon, QPixmap, QPainter, QImage
from qgis.PyQt.QtWidgets import QAction, QTabWidget, QMessageBox, QComboBox, QTableWidget, QTableWidgetItem, \
    QAbstractItemView, QGraphicsView, QWidget, QFileDialog
from qgis._core import QgsProject, QgsPointXY
from qgis.gui import QgsMapToolEmitPoint, QgsMapMouseEvent

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .time_series_viewing_tool_dialog import TimeSeriesViewingToolDialog
import os.path
from .sample import *
from osgeo import gdal, gdalconst, osr, ogr
import pyqtgraph as pg
import pandas as pd


def coordTransform(srsSource, srsDest, x, y):
    coordTransformation = osr.CreateCoordinateTransformation(srsSource, srsDest)
    if osr.SpatialReference.IsProjected(srsSource):
        dstX, dstY, _ = (coordTransformation.TransformPoint(x, y))
    else:
        dstX, dstY, _ = (coordTransformation.TransformPoint(y, x))
    if osr.SpatialReference.IsProjected(srsDest):
        return dstX, dstY
    else:
        return dstY, dstX


class TimeSeriesViewingTool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TimeSeriesViewingTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Time Series Viewing Tool')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TimeSeriesViewingTool', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/time_series_viewing_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Time series viewing tool'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Time Series Viewing Tool'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
        self.dlg = TimeSeriesViewingToolDialog()
        self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg.tabContainer.currentChanged.connect(self.ontabContainerCurrentChanged)
        self.dlg.pbSaveImage.clicked.connect(self.onpbSaveImage)
        self.dlg.pbAddtoRecords.clicked.connect(self.onpbAddtoRecordsClicked)
        self.dlg.pbExport.clicked.connect(self.onpbExportClicked)
        self.imgFile = None
        self.mtPrintClickedPoint = None
        self.firsr_mtPrintClickedPoint = True
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if self.mtPrintClickedPoint:
            self.iface.mapCanvas().unsetMapTool(self.mtPrintClickedPoint)

    def ontabContainerCurrentChanged(self):
        tabIndex = self.dlg.tabContainer.currentIndex()

        if tabIndex == 1:
            if self.firsr_mtPrintClickedPoint:
                self.mtPrintClickedPoint = QgsMapToolEmitPoint(self.iface.mapCanvas())
                self.firsr_mtPrintClickedPoint = False
            self.iface.mapCanvas().setMapTool(self.mtPrintClickedPoint)
            self.drawFlag = False
            self.__initcbBandCountandSR()
            self.mtPrintClickedPoint.canvasClicked.connect(self.onmapClicked)
        else:
            if self.mtPrintClickedPoint:
                self.iface.mapCanvas().unsetMapTool(self.mtPrintClickedPoint)

    def onmapClicked(self, point: QgsPointXY):
        if self.drawFlag == False:
            return
        srcX, srcY = point.x(), point.y()
        srsS = osr.SpatialReference()
        srsS.ImportFromWkt(QgsProject.instance().crs().toWkt())
        srsD = osr.SpatialReference()
        srsD.ImportFromWkt(self.tifSR)
        dstX, dstY = coordTransform(srsS, srsD, srcX, srcY)
        dstPx, dstPy = geo2pixel(self.geoT, [dstX, dstY])
        bandindex = int(self.dlg.cbBandCount.currentText())
        values = [sample(tif, bandindex, dstPx, dstPy) for tif in self.dlg.tifFiles]
        self.drawPointRecords(srcX, srcY, values)
        self.mtPrintClickedPoint.values = values
        self.mtPrintClickedPoint.srcX = srcX
        self.mtPrintClickedPoint.srcY = srcY

    def drawPointRecords(self, srcX, srcY, values):
        self.dlg.gvPointRecords.clear()
        self.dlg.gvPointRecords.plot(y=values, pen=pg.mkPen(width=3))
        title = "Point:{:0.3f},{:0.3f}".format(srcX, srcY)
        self.dlg.gvPointRecords.setTitle(f"<font>{title}</font>")
        self.dlg.gvPointRecords.showGrid(True, True)
        self.dlg.gvPointRecords.setLabel('bottom', '影像序号')
        QTableWidget.setVerticalHeaderLabels(self.dlg.tbPointRecords, ['影像', 'Values'])
        QTableWidget.setRowCount(self.dlg.tbPointRecords, 2)
        QTableWidget.setColumnCount(self.dlg.tbPointRecords, len(self.dlg.tifFiles))
        for index, value in enumerate(values):
            imgItem = QTableWidgetItem(os.path.basename(self.dlg.tifFiles[index][0:-4]))
            imgItem.setTextAlignment(Qt.AlignCenter)
            valueItem = QTableWidgetItem('{:.3f}'.format(value))
            valueItem.setTextAlignment(Qt.AlignCenter)
            QTableWidget.setItem(self.dlg.tbPointRecords, 0, index, imgItem)
            QTableWidget.setItem(self.dlg.tbPointRecords, 1, index, valueItem)
        QTableWidget.setEditTriggers(self.dlg.tbPointRecords, QAbstractItemView.NoEditTriggers)
        QTableWidget.resizeColumnsToContents(self.dlg.tbPointRecords)

    def __initcbBandCountandSR(self):
        if self.dlg.tifFiles:
            firstTif = self.dlg.tifFiles[0]
            gdal.AllRegister()
            ds = gdal.Open(firstTif, gdalconst.GA_ReadOnly)
            if ds == None:
                QMessageBox.critical(self.dlg, "错误", f"{firstTif}不存在，无法确定参考影像坐标系！", QMessageBox.Yes,
                                     QMessageBox.Yes)
                return
            bandcount = ds.RasterCount
            for bandindex in range(bandcount):
                self.dlg.cbBandCount.addItem(str(bandindex + 1))
            self.tifSR = gdal.Dataset.GetProjectionRef(ds)
            self.geoT = gdal.Dataset.GetGeoTransform(ds)
            self.drawFlag = True
            ds = None

    def onpbSaveImage(self):
        rect = QGraphicsView.viewport(self.dlg.gvPointRecords).rect()
        pixmap = QPixmap(rect.size())
        painter = QPainter(pixmap)
        painter.begin(pixmap)
        self.dlg.gvPointRecords.render(painter, QRectF(pixmap.rect()), rect)
        painter.end()
        if self.imgFile:
            imgFile, _ = QFileDialog.getSaveFileName(self.dlg, "保存图像", os.path.dirname(self.imgFile),
                                                     "影像 (*.png *.jpg)")
        else:
            imgFile, _ = QFileDialog.getSaveFileName(self.dlg, "保存图像", './', "影像 (*.png)")
        if imgFile:
            img = pixmap.save(imgFile)
            self.imgFile = imgFile

    def onpbAddtoRecordsClicked(self):
        if not (self.mtPrintClickedPoint.values):
            return
        srcXItem = QTableWidgetItem('{:0.6f}'.format(self.mtPrintClickedPoint.srcX))
        srcXItem.setTextAlignment(Qt.AlignCenter)
        srcYItem = QTableWidgetItem('{:0.6f}'.format(self.mtPrintClickedPoint.srcY))
        srcYItem.setTextAlignment(Qt.AlignCenter)
        self.dlg.tbRecords.setItem(self.dlg.recordsNum, 0, srcXItem)
        self.dlg.tbRecords.setItem(self.dlg.recordsNum, 1, srcYItem)
        for index, value in enumerate(self.mtPrintClickedPoint.values):
            valueItem = QTableWidgetItem('{:0.5f}'.format(value))
            valueItem.setTextAlignment(Qt.AlignCenter)
            self.dlg.tbRecords.setItem(self.dlg.recordsNum, index + 2, valueItem)
        if self.dlg.recordsNum == 0:
            dfcolumns = ['x', 'y']
            for tif in self.dlg.tifFiles:
                dfcolumns.append(os.path.basename(tif)[0:-4])
            self.dlg.recordsDf = pd.DataFrame(columns=dfcolumns, dtype=float)
        dfHeaders = self.dlg.recordsDf.columns.tolist()
        dfVlues = list([self.mtPrintClickedPoint.srcX, self.mtPrintClickedPoint.srcY])
        dfVlues.extend(self.mtPrintClickedPoint.values)
        record = dict(zip(dfHeaders, dfVlues))
        self.dlg.recordsDf = self.dlg.recordsDf.append(record, ignore_index=True)
        self.dlg.recordsNum += 1

    def onpbExportClicked(self):
        if self.dlg.recordsNum == 0:
            QMessageBox.information(self.dlg, "导出", "没有数据需要导出!", QMessageBox.Yes, QMessageBox.Yes)
            return
        formatIndex = self.dlg.cbExportFormat.currentIndex()
        if formatIndex == 0:
            formatFilter = "导出格式 (*.csv)"
        elif formatIndex == 1:
            formatFilter = "导出格式 (*.xls)"
        else:
            formatFilter = "导出格式 (*.shp)"
        exportFileName, _ = QFileDialog.getSaveFileName(self.dlg, "导出记录", "./", formatFilter)
        if not (exportFileName):
            return
        if formatIndex == 0:
            pd.DataFrame.to_csv()
            self.dlg.recordsDf.to_csv(exportFileName,index_label='id')
            return
        elif formatIndex == 1:
            self.dlg.recordsDf.to_excel(exportFileName, sheet_name='时序记录')
            return
        self.exportToShp(exportFileName)

    def exportToShp(self, fileName):
        ogr.RegisterAll()
        driver = ogr.GetDriverByName("ESRI Shapefile")
        ds = ogr.Driver.CreateDataSource(driver,fileName)
        srs = osr.SpatialReference()
        srs.ImportFromWkt(QgsProject.instance().crs().toWkt())
        oLay = ogr.DataSource.CreateLayer(ds, "PointRecords", srs, ogr.wkbPoint)
        xField = ogr.FieldDefn('x', ogr.OFTReal)
        yField = ogr.FieldDefn('y', ogr.OFTReal)
        ogr.Layer.CreateField(oLay, xField)
        ogr.Layer.CreateField(oLay, yField)
        for tif in self.dlg.tifFiles:
            tifname = os.path.basename(tif)[0:-4]
            tifField = ogr.FieldDefn(tifname, ogr.OFTReal)
            ogr.Layer.CreateField(oLay, tifField)
        for _, row in self.dlg.recordsDf.iterrows():
            oFea = ogr.Feature(ogr.Layer.GetLayerDefn(oLay))
            for filed, value in row.iteritems():
                ogr.Feature.SetField(oFea, filed, value)
            oPoint = ogr.CreateGeometryFromWkt("POINT({} {})".format(row['x'], row['y']), srs)
            ogr.Feature.SetGeometry(oFea, oPoint)
            ogr.Layer.CreateFeature(oLay, oFea)
        ds = None
